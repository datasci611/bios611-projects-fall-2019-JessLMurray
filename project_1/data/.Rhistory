library(tidyverse)
library(mclust)
library(lubridate)
# Load UMD data and Select variables that is useful
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
# Formulate Date with as.Date
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
# Plot the data points to see which data should be removed
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Provided for', y='Food Pounds')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of People Provided for')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Pounds')
# Remove outliers and unreasonable data
umd_df = umd_df %>%
filter(Food.Pounds < 100, Food.Provided.for < 60) %>%
filter(Date < as.Date('2019-09-24'), Date > as.Date('2000-01-01'))
# Plot: Total Food Pound in one day ~ Date
total_food_pound = aggregate(Food.Pounds~Date, umd_df, sum)
ggplot(total_food_pound, aes(x=Date, y=Food.Pounds)) +
geom_point(size=0.2) +
labs(x='Time', y='Food Pounds') +
geom_smooth()
# Plot: Number of People that UMD Provided food for in one day ~ Date
total_food_provided_for = aggregate(Food.Provided.for~Date, umd_df, sum)
ggplot(total_food_provided_for, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Food Provided for') +
geom_smooth()
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds, color=year)) +
geom_point(size=1) +
labs(x='Number of People', y='Food Pounds')
# EM clustering, 2 cluster
fit = umd_df %>%
select(c(Food.Provided.for, Food.Pounds)) %>%
Mclust(G=2)
umd_df$cluster = as.factor(fit$classification)
umd_df$uncertainty = fit$uncertainty
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
# by cluster with fitted simple linear regression.
ggplot(umd_df, aes(x=Food.Provided.for, y=Food.Pounds, color=cluster, group=cluster)) +
geom_point() +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People', y='Food Pounds') +
theme_minimal() +
scale_color_discrete('Group')
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth()
library(tidyverse)
library(mclust)
library(lubridate)
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
description = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
umd_df = umd_df %>%
filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Every Day', y='Total Food Pounds Every Day', title='Total Food Pounds Every Day by Number of People Every Day') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Total Food Pounds Every Day', title='Total Food Pounds Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5))
umd_df = umd_df %>%
filter(Food.Pounds < 100, Food.Provided.for < 60) %>%
filter(Date < as.Date('2019-09-24'), Date > as.Date('2000-01-01'))
number_of_people_every_day = aggregate(Food.Provided.for~Date, umd_df, sum)
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth()
total_food_pound_every_day = aggregate(Food.Pounds~Date, umd_df, sum)
ggplot(total_food_pound_every_day, aes(x=Date, y=Food.Pounds)) +
geom_point(size=0.2) +
labs(x='Time', y='Total Food Pounds Every Day', title='Total Food Pounds Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth()
6:10
seq(2000, 2020)
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = seq(2000, 2020)) +
geom_smooth()
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = seq=2000:2020) +
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = 2000:2020) +
geom_smooth()
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks = as.Date(2000:2020)) +
geom_smooth()
as.Date(2000:2020)
as.Date(2000:2020, "%Y")
as.Date(c(2000:2020), "%Y")
seq("2000-01-01", "2020-01-01")
seq(as.Date("2000-01-01"), as.Date("2020-01-01"))
as.Date(c("2000-01-01", "2001-01-01", "2002-01-01", "2003-01-01", "2004-01-01", "2005-01-01", "2006-01-01", "2007-01-01", "2008-01-01"))
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(breaks = as.Date(c("2000-01-01", "2001-01-01", "2002-01-01", "2003-01-01", "2004-01-01", "2005-01-01", "2006-01-01", "2007-01-01", "2008-01-01", "2009-01-01", "2010-01-01", "2011-01-01", "2012-01-01", "2013-01-01", "2014-01-01", "2015-01-01", "2016-01-01", "2017-01-01", "2018-01-01", "2019-01-01"))) +
geom_smooth()
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(breaks = as.Date(c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))) +
geom_smooth()
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_date(breaks = as.Date(c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), "%Y")) +
geom_smooth()
ggplot(number_of_people_every_day, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Number of People Every Day', title='Number of People Every Day over Time') +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth()
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=1) +
labs(x='Number of People', y='Food Pounds') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds, color=year)) +
geom_point(size=1) +
labs(x='Number of People', y='Food Pounds') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(umd_df, aes(x=Food.Provided.for, y=Food.Pounds, color=cluster, group=cluster)) +
geom_point() +
# geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People', y='Food Pounds') +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
scale_color_discrete('Group')
# EM clustering, 2 cluster
fit = umd_df %>%
select(c(Food.Provided.for, Food.Pounds)) %>%
Mclust(G=2)
umd_df$cluster = as.factor(fit$classification)
umd_df$uncertainty = fit$uncertainty
ggplot(umd_df, aes(x=Food.Provided.for, y=Food.Pounds, color=cluster, group=cluster)) +
geom_point() +
# geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People', y='Food Pounds') +
theme(plot.title = element_text(hjust = 0.5)) +
theme_minimal() +
scale_color_discrete('Group')
lm_group1 = lm(Food.Pounds~Food.Provided.for, filter(umd_df, cluster=1))
lm_group1 = lm(Food.Pounds~Food.Provided.for, filter(umd_df, cluster==1))
summary(lm_group1)
lm_group2 = lm(Food.Pounds~Food.Provided.for, filter(umd_df, cluster==2))
summary(lm_group2)
library(tidyverse)
library(mclust)
library(lubridate)
# Load UMD data and Select variables that is useful
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
# Formulate Date with as.Date
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
drop_na() %>%
#filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
drop_na() %>%
filter(Food.Provided.for >= 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
# Load UMD data and Select variables that is useful
umd_df = read.csv('~/Documents/GitHub/bios611-projects-fall-2019-Jianqiao-Wang/project_1/data/UMD_Services_Provided_20190719.tsv', sep = '\t', header = TRUE)
umd_df = select(umd_df, c(Date, Food.Provided.for, Food.Pounds))
# Formulate Date with as.Date
umd_df$Date = as.Date(umd_df$Date, "%m/%d/%Y")
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
drop_na() %>%
# filter(Food.Provided.for >= 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
# Plot the data points to see which data should be removed
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Number of People Provided for', y='Food Pounds')
ggplot(umd_df, aes(Date, Food.Provided.for)) +
geom_point(size=0.5) +
labs(x='Time', y='Number of People Provided for')
ggplot(umd_df, aes(Date, Food.Pounds)) +
geom_point(size=0.5) +
labs(x='Time', y='Food Pounds')
# Remove outliers and unreasonable data
umd_df = umd_df %>%
filter(Food.Pounds < 100, Food.Provided.for < 60) %>%
filter(Date < as.Date('2019-09-24'), Date > as.Date('2000-01-01'))
# Plot: Total Food Pound in one day ~ Date
total_food_pound = aggregate(Food.Pounds~Date, umd_df, sum)
ggplot(total_food_pound, aes(x=Date, y=Food.Pounds)) +
geom_point(size=0.2) +
labs(x='Time', y='Food Pounds') +
geom_smooth()
# Plot: Number of People that UMD Provided food for in one day ~ Date
total_food_provided_for = aggregate(Food.Provided.for~Date, umd_df, sum)
ggplot(total_food_provided_for, aes(x=Date, y=Food.Provided.for)) +
geom_point(size=0.2) +
labs(x='Time', y='Food Provided for') +
geom_smooth()
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
ggplot(umd_df, aes(Food.Provided.for, Food.Pounds, color=year)) +
geom_point(size=1) +
labs(x='Number of People', y='Food Pounds')
# EM clustering, 2 cluster
fit = umd_df %>%
select(c(Food.Provided.for, Food.Pounds)) %>%
Mclust(G=2)
umd_df$cluster = as.factor(fit$classification)
umd_df$uncertainty = fit$uncertainty
# Plot: Total Food Pound in one day ~ Number of People that UMD Provided food for in one day
# by cluster with fitted simple linear regression.
ggplot(umd_df, aes(x=Food.Provided.for, y=Food.Pounds, color=cluster, group=cluster)) +
geom_point() +
geom_smooth(method='lm', se=FALSE, formula=y~x-1) +
labs(x='Number of People', y='Food Pounds') +
theme_minimal() +
scale_color_discrete('Group')
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
drop_na() %>%
filter(Food.Provided.for > 0, Food.Pounds >= 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
# Remove rows with missing data and Sort data by Date
umd_df = umd_df %>%
drop_na() %>%
filter(Food.Provided.for > 0, Food.Pounds > 0) %>%
arrange(Date) %>%
mutate(year=year(Date))
#set wd to current data folder
setwd("D:/bios611-homework-fall-2019-JessLMurray/bios611-projects-fall-2019-JessLMurray/project_1/data")
getwd()
#load in the data
#note - I cleaned up the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
library(readxl)
umd <- read_excel("UMD_Services_Provided_20190719_cleaned 'type of bill paid'.xls")
View(umd)
library(ggplot2)
library(ggplot2)
library(dplyr)
# Preview the data
diamonds
diamonds_subset = sample_n(diamonds, 1000, replace=FALSE)
# To start, assign variables to the x and y axes,
# and pick a geom (here I chose scatter plot or "geom_point")
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point()
# Examples of other geoms
# Notice that these ones include a statistical transform
ggplot(diamonds_subset, aes(x=carat, y=price)) +
geom_hex()
ggplot(diamonds_subset, aes(x=carat, y=price)) +
geom_bin2d()
# It's easy to add layers ... just tack on another "geom"
# Take a moment to explore all the possible geom
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point() +
geom_rug(alpha=0.3)
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point() +
geom_smooth()
# To modify the appearance of the elements of a layer,
# add specifications for size, alpha (transparency), etc.
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point(size=4, color='red') +
geom_smooth()
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point(size=4, alpha=0.2) +
geom_smooth(size=3)
# To link the appearance of the elements of a layer to
# variables in the data, use the same specifications as above
# but define the dependency in an "aes()" function for that
# layer.
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point(size=4, aes(shape=cut)) +
geom_smooth() +
theme_bw()
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point(size=4, aes(color=cut, shape=color)) +
geom_smooth()
# Facets are another way to map variables onto your visualization
ggplot(diamonds_subset,aes(x=carat, y=price)) +
geom_point(size=4) +
facet_wrap(~cut)
# Statistical transformations incorporate summaries of your data
# easily into your visualization
ggplot(diamonds_subset,aes(x=price)) +
geom_histogram()
#set wd to current data folder
setwd("D:/bios611-homework-fall-2019-JessLMurray/bios611-projects-fall-2019-JessLMurray/project_1/data")
getwd()
#load in the data
#note - I cleaned up the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
library(readxl)
umd <- read_excel("UMD_Services_Provided_20190719_cleaned 'type of bill paid'.xls")
View(umd)
#remove all rows with dates prior to 1983 (when UMD was founded)
library(dplyr)
umdclean <- umd %>% filter(Date >= "1983-01-01")
View(umdclean)
#noticed there are some rows with dates in the future - removed those too
umdclean <- umdclean %>% filter(Date <= "2019-09-15")
nrow(umdclean)
#How many clients/families use services provided by UMD?
#find the number of unique client file numbers
library(dplyr)
umdunique <- unique(umdclean$`Client File Number`)
length(umdunique)
#how many clients/families used services each year?
#separate date column so that year can be used
install.packages("lubridate")
library(lubridate)
umddate <- umdclean %>%
dplyr::mutate(year = lubridate::year(Date), month = lubridate::month(Date), day = lubridate::day(Date))
#convert year column to numeric
transform(umddate, year = as.numeric(year))
#convert year column to numeric
transform(umddate, year = as.numeric(year))
#histogram
umdyear <- umddate$year
hist(umdyear, main="Frequency of Clients/Families Aided by UMD per Year", ylab="Year", col="light blue", breaks = 29)
