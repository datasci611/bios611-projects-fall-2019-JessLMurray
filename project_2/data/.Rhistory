geom_boxplot(aes(fill=delay))
# Select the carrier variable and count the number of occurences of each
# carrier with flights under high precipitation conditions
#
# Do the same carrier counting, but without the filter (on the flights dataframe)
# Join the two results and use mutate to calculate a ratio between the
# number of high precipitation flights and the total number of flights
# Join with the "airlines" dataframe to get the full names of the airlines
#
# Which airlines see the most precipitation?
# Which see the most as a proportion of their flights?
precip_df = flights %>%
left_join(weather, by=c('year', 'month', 'day', 'hour', 'origin')) %>%
filter(precip > quantile(precip, 0.9, na.rm=TRUE)) %>%
select(carrier) %>%
count(carrier) %>%
arrange(-n) %>%
mutate(w.cnt = n)
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(abs(delay.val))) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(abs(delay.val))) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(abs(delay.val))) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(abs(delay.val))) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(abs(delay.val))) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(abs(delay.val))) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(delay.val)) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
mutate(log1p(delay.val)) %>%
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
ggplot(flights2, aes(x=delay, y=log1p(delay.val))) +
geom_boxplot(aes(x=delay, y=log1p(delay.val))) +
labs(x = "Delay", y = "ln(Delay Value)")
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
mutate(l.delay.val = log2(delay.val)) %>%
ggplot(aes(x=delay, y=l.delay.val)) +
geom_boxplot(aes(fill=delay))
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
mutate(l.delay.val = log2(delay.val)) %>%
ggplot(aes(x=delay, y=l.delay.val)) +
geom_boxplot(aes(fill=delay))
#Load the NYC flights data set using library(nycflights13)
library('tidyverse')
library('nycflights13')
View(flights)
#Gather "dep_delay" and "arr_delay" into a variable "delay"
flights2 <- flights %>%
gather(arr_delay, dep_delay, key = "delay",
value = "delay.val") %>%
#use mutate to log transform the delay values
#pipe directly into ggplot and display the results as box plots (with “delay” on x-axis, and delay values on y-axis)
mutate(l.delay.val = log2(delay.val)) %>%
ggplot(aes(x=delay, y=l.delay.val)) +
geom_boxplot(aes(fill=delay))
## Gather "dep_delay" and "arr_delay" into a variable "delay"
# Use mutate to log transform the delay values, then
# pipe directly into ggplot and display as a box plot
flights %>%
gather(dep_delay, arr_delay, key='delay', value='delay.val') %>%
mutate(l.delay.val = log2(delay.val)) %>%
ggplot(aes(x=delay, y=l.delay.val)) +
geom_boxplot(aes(fill=delay))
library(tidyverse)
library(nycflights13)
# Read in the data
police_df = read_csv(url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = "**")
library(tidyverse)
# Read in the data
police_df = read_csv(url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = "**")
#randomly split data set into two halves
smp_size <- floor(0.5 * nrow(police_df))
set.seed(111)
train_ind <- sample(seq_len(nrow(police_df)), size = smp_size)
train <- police_df[train_ind, ]
test <- mtcars[-train_ind, ]
library(caret)
#cluster cities into 3 groups based on variables
#"all", "white", and "non-white" using k-means
install.packages("caret")
library(caret)
fit = train(type ~ train + test, data = police_dif,
method = "k-means")
fit = train(type ~ train + test, data = police_df,
method = "k-means")
library(mclust)
ggplot(gene_df, aes(gene_a, gene_b)) +
geom_point(size=2, alpha=0.75)
# Set the random seed
set.seed(0)
# Generate example data set
N = 30
U1 = 1
U2 = 4.5
gene_df = rbind(tibble(gene_a = rnorm(n=N, mean=U2), gene_b = rnorm(n=N, mean=U1), explant_id = seq(1, N), type = 1),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U1), explant_id = seq(N+1, 2*N), type = 2),
tibble(gene_a = rnorm(n=N, mean=U1), gene_b = rnorm(n=N, mean=U2), explant_id = seq((2*N)+1, 3*N), type = 3))
gene_df$type = as.factor(gene_df$type)
ggplot(gene_df, aes(gene_a, gene_b)) +
geom_point(size=2, alpha=0.75)
fit = train(type ~ all, white, non-white, data = police_df,
method = "k-means")
library(reshape2)
library(tidyverse)
library(reshape2)
library(modelr)
# Read in the data
police_df = read_csv(url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = "**")
#format the data
police_df = police_df %>%
gather(-city, -police_force_size, key='variable', value='value')
View(police_df)
#reformat the data
police_df = police_df %>%
gather(-city, -police_force_size, key='variable', value='value')
View(police_df)
View(police_df)
# Plot data
ggplot(police_df, aes(x=police_force_size, y=value, group=variable)) +
geom_point(aes(color = variable))
#create a linear model in R that predicts the proportion of police officers that live in city limits based on police force size and officer race
model <- lm(all ~ police_force_size * variable, data = police_df)
View(police_df)
#create a linear model in R that predicts the proportion of police officers that live in city limits based on police force size and officer race
model <- lm(value ~ police_force_size * variable, data = police_df)
# Read in the data
police_df = read_csv(url("https://raw.githubusercontent.com/fivethirtyeight/data/master/police-locals/police-locals.csv"),
na = "**")
#drop NA values from police_df
police_df <- na.omit(police_df)
#reformat the data
police_df = police_df %>%
gather(-city, -police_force_size, key='variable', value='value')
View(police_df)
# Plot data
ggplot(police_df, aes(x=police_force_size, y=value, group=variable)) +
geom_point(aes(color = variable))
#visualize results
predictions = police_df %>%
data_grid(police_force_size, variable)
View(predictions)
#visualize results
predictions = police_df %>%
data_grid(police_force_size, variable) %>%
gather_predictions(model)
#create a linear model in R that predicts the proportion of police officers that live in city limits based on police force size and officer race
model <- lm(value ~ police_force_size * variable, data = police_df)
coef(model)
#visualize results
predictions = police_df %>%
data_grid(police_force_size, variable) %>%
gather_predictions(model)
View(predictions)
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable))
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable)
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = predictions, color = variable)) +
facet_wrap(~variable)
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable)
#visualize results
ggplot(police_df, aes(x=police_force_size, y=value, ylab = fraction, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable)
#visualize results
ggplot(police_df, aes(x=police_force_size, y=value, ylab = "fraction", group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable)
#visualize results
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable, ylab = "fraction")) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable)
#visualize results
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable, ylab = "fraction")
#visualize results
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable) +
ylab("fraction")
#visualize results
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable) +
ylab("fraction of police force")
#visualize results
ggplot(police_df, aes(x=police_force_size, y=value, group = variable)) +
geom_point(aes(color = variable)) +
geom_line(data = predictions, aes(y = pred, color = variable)) +
facet_wrap(~variable) +
ylab("fraction of police force") +
xlab("police force size")
library(tidyverse)
library(tidyverse)
library(readxl)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
#load in the data
#note - I cleaned up the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
umd <- read_excel("C:/Users/jessi/Desktop/UMD project/UMD_Services_Provided_20190719_cleaned 'type of bill paid'.xls")
#load in the data
#note - I cleaned up the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
umd <- read_excel("C:/Users/jessi/Desktop/UMD project/UMD_Services_Provided_20190719_cleaned 'type of bill paid'.xls")
#load in the data
#note - I cleaned up the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
umd <- read_excel("D:/bios611-homework-fall-2019-JessLMurray/bios611-projects-fall-2019-JessLMurray/project_1/data/UMD_Services_Provided_20190719_cleaned 'type of bill paid'.xls")
#load in the data
#note - I cleaned up the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
umd <- read_excel("D:/bios611-homework-fall-2019-JessLMurray/bios611-projects-fall-2019-JessLMurray/project_1/data/UMD_Services_Provided_20190719_cleaned 'type of bill paid'.xls")
## Urban Ministries of Durham Data Analysis
### How many clients/families use services provided by UMD?
To begin answering this question, I first needed to clean the data. I removed all rows with dates prior to 1983 (when UMD was founded) and after the date when I began this analysis (Sept 15, 2019) - these dates are clearly typos.
umdclean <- umd %>%
filter(Date >= "1983-01-01") %>%
filter(Date <= "2019-09-15")
nrow(umdclean)
#remove all rows with mistyped dates
library(dplyr)
umdclean <- umd %>%
filter(Date >= "1983-01-01") %>%
filter(Date <= "2019-09-15")
nrow(umdclean)
There were **65,498** instances of services provided in this dataset!
Let's plot the number of services provided over time:
```{r message=FALSE, include=FALSE, warning=FALSE}
#separate out dates for plotting purposes
umdclean <- umdclean %>%
dplyr::mutate(year = lubridate::year(Date), month = lubridate::month(Date), day = lubridate::day(Date))
transform(umdclean, year = as.numeric(year))
transform(umdclean, year = as.numeric(year))
```{r message = FALSE, warning = FALSE}
ggplot(umdclean, aes(x=year)) +
geom_histogram(color = "white") +
labs(x = "Year", y = "Frequency of Services Provided", title = "Number of Times Service was Provided by UMD")
ggplot(umdclean, aes(x=year)) +
geom_histogram(color = "white") +
labs(x = "Year", y = "Frequency of Services Provided", title = "Number of Times Service was Provided by UMD")
Based on this histogram, it looks like most services weren't provided or accounted for prior to around the year 2000. I will therefore focus further analysis on data from the past 20 years (1999 to 2019).
ggplot(umdclean, aes(x=year)) +
geom_histogram(color = "white") +
labs(x = "Year", y = "Frequency of Services Provided", title = "Number of Times Service was Provided by UMD")
transform(umdclean, year = as.numeric(year))
#separate out dates for plotting purposes
umdclean <- umdclean %>%
dplyr::mutate(year = lubridate::year(Date), month = lubridate::month(Date), day = lubridate::day(Date))
transform(umdclean, year = as.numeric(year))
transform(umdclean, year = as.numeric(year))
```{r message = FALSE, warning = FALSE}
ggplot(umdclean, aes(x=year)) +
geom_histogram(color = "white") +
labs(x = "Year", y = "Frequency of Services Provided", title = "Number of Times Service was Provided by UMD")
umd20 <- umdclean %>%
filter(Date >= "1999-01-01")
umd20 <- umdclean %>%
filter(Date >= "1999-01-01")
While the raw number of times service was provided is interesting, it doesn't tell us the number of *unique* clients/families that were assisted by UMD. We must find the number of unique client file numbers to do this:
```{r warning = FALSE}
#How many clients/families use services provided by UMD?
#find the number of unique client file numbers
umdunique <- unique(umd20$`Client File Number`)
length(umdunique)
colnames(umd20)[colnames(umd20)=="Type of Bill Paid"] <- "bill"
umdbills <- na.omit(umd20$bill)
umdbills <- as.data.frame(umdbills)
colnames(umd20)[colnames(umd20)=="Type of Bill Paid"] <- "bill"
umdbills <- na.omit(umd20$bill)
umdbills <- as.data.frame(umdbills)
```{r message=FALSE, warning = FALSE, echo=FALSE }
ggplot(umdbills, aes(x = umdbills)) +
labs(x="Reason for Monetary Donation from UMD", y="Frequency") +
geom_histogram(stat="count") +
theme(axis.text.x=element_text(angle = 45, hjust = 1))
install.packages(shiny)
install.packages("shiny")
install.packages("shinydashboard")
install.packages("rsconnect")
library(shiny)
library(tidyverse)
city_df = read_csv(url("https://gist.githubusercontent.com/Miserlou/11500b2345d3fe850c92/raw/e36859a9eef58c231865429ade1c142a2b75f16e/gistfile1.txt"), skip=3)
# Define UI for app that draws a histogram and a data table----
ui <- fluidPage(
# App title ----
titlePanel("US Cities Dashboard"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Integer for the number of bins ----
numericInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram and table----
plotOutput(outputId = "popPlot"),
dataTableOutput(outputId = "popTable")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# renderPlot creates histogram and links to ui
output$popPlot <- renderPlot({
bins = seq(min(city_df$population, na.rm = T),
max(city_df$population, na.rm = T),
length.out = input$bins + 1)
ggplot(city_df, aes(x=population)) +
geom_histogram(breaks = bins) +
labs(x = "Population size",
title = "Histogram of US city populations") +
scale_y_log10()
})
# Data table output, linked to ui
output$popTable <- renderDataTable({city_df})
}
shinyApp(ui = ui, server = server)
#app.R
library(tidyverse)
library(readxl)
library(dplyr)
library(lubridate)
library(readxl)
library(ggplot2)
library(shiny)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#set wd
setwd("D:/bios611-projects-fall-2019-JessLMurray/project_2/data")
getwd()
#load in the data
#note - I cleaned up the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
umd <- read_excel("D:/bios611-projects-fall-2019-JessLMurray/project_2/data/UMD_Services_Provided_20190719_cleaned 'type of bill paid'.xls")
#remove all rows with mistyped dates
library(dplyr)
umdclean <- umd %>%
filter(Date >= "1983-01-01") %>%
filter(Date <= "2019-09-15")
#separate out dates for plotting purposes
umdclean <- umdclean %>%
dplyr::mutate(year = lubridate::year(Date), month = lubridate::month(Date), day = lubridate::day(Date))
transform(umdclean, year = as.numeric(year))
umd20 <- umdclean %>%
filter(Date >= "1999-01-01")
bls_avg <- read_excel("D:/bios611-projects-fall-2019-JessLMurray/project_2/data/BLS_unemployment_avg.xls")
#histogram of the frequency of clients/families aided per year
umdyear <- umd20$year
histo <- hist(umdyear, main="Frequency of Clients/Families Aided by UMD
per Year", ylab="Year", col="light blue")
counts <- histo$counts
counts
#correlation between the unemployment rate and the number of clients/families aided per year
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "National Unemployment vs. Number of Clients/Families Aided per Year")
model = lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(model)
#function for correlation
employ <- function(employ) {
clientnum = ((employ)*662.9) - 641.2
return(clientnum)
}
#define UI
ui <- fluidPage(
#App title
titlePanel("Predicting the Number of Clients/Families Aided by UMD Per Year Based on National Unemployment Rate"),
#sidebar layout with input and output definitions
sidebarLayout(
#sidebar panel, input
sidebarPanel(
numericInput("Unemployment.Rate..Percent.", "Unemployment Rate (Percent)", value = 5, min = 0, max = NA, step = NA, width = NULL)
),
#main panel for displaying outputs
mainPanel(
#output: scatter plot
tabsetPanel(type = "tabs",
tabPanel("Model Prediction", textOutput("clients")), # dependent variable (clients aided/yr) output
tabPanel("Scatterplot", plotOutput("blscorr")), # Plot
tabPanel("Model Summary Stats", verbatimTextOutput("summary")) # Regression output
)
)
)
)
#define server logic for making figure
server <- function(input, output) {
# dependent variable (clients aided/yr) output
output$clients <- renderPrint({
paste('Predicted Clients/Families Aided per Year =', employ(input$Unemployment.Rate..Percent.))
})
# Scatterplot output
output$blscorr <- renderPlot({
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "Clients/Families Aided per Year vs. National Unemployment")
}, height=400)
# Regression output
output$summary <- renderPrint({
fit <- lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(fit)
})
}
shinyApp(ui = ui, server = server)
