summary(fit)
})
}
shinyApp(ui = ui, server = server)
#rsconnect::deployApp("D:/bios611-projects-fall-2019-JessLMurray/project_2")
shiny::runApp()
shiny::runApp()
#app.R
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(shiny)
library(devtools)
source("helper_functions.R")
#rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#load in the data
#note - I cleaned up the dates and the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
#see helper functions script for description of functions
load_umd()
clean_umd()
umd20 <- clean_umd()
load_bls()
clean_umdyear()
numclean_umdyear()
histo <- hist(umdyear, main="Frequency of Clients/Families Aided by UMD
per Year", ylab="Year", col="light blue")
counts = histo$counts
#define UI
ui <- fluidPage(
#App title
titlePanel("Predicting the Number of Clients/Families Aided by UMD Per Year Based on National Unemployment Rate"),
#sidebar layout with input and output definitions
sidebarLayout(
#sidebar panel, input
sidebarPanel(
numericInput("Unemployment.Rate..Percent.", "Unemployment Rate (Percent)", value = 5, min = 0, max = NA, step = NA, width = NULL)
),
#main panel for displaying outputs
mainPanel(
#output: scatter plot
tabsetPanel(type = "tabs",
tabPanel("Model Prediction", textOutput("clients")), # dependent variable (clients aided/yr) output
tabPanel("Scatterplot", plotOutput("blscorr")), # Plot
tabPanel("Model Summary Stats", verbatimTextOutput("summary")) # Regression output
)
)
)
)
#define server logic for making figure
server <- function(input, output) {
# dependent variable (clients aided/yr) output
output$clients <- renderText({
paste('Predicted Number of Clients/Families Aided per Year =', employ(input$Unemployment.Rate..Percent.))
})
# Scatterplot output
output$blscorr <- renderPlot({
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "Clients/Families Aided per Year vs. National Unemployment")
}, height=400)
# Regression output
output$summary <- renderPrint({
fit <- lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(fit)
})
}
shinyApp(ui = ui, server = server)
#rsconnect::deployApp("D:/bios611-projects-fall-2019-JessLMurray/project_2")
#app.R
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(shiny)
library(devtools)
source("helper_functions.R")
#rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#load in the data
#note - I cleaned up the dates and the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
#see helper functions script for description of functions
load_umd()
clean_umd()
umd20 <- clean_umd()
load_bls()
clean_umdyear()
numclean_umdyear()
histo <- hist(umdyear, main="Frequency of Clients/Families Aided by UMD
per Year", ylab="Year", col="light blue")
counts = histo$counts
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
#define UI
ui <- fluidPage(
#App title
titlePanel("Predicting the Number of Clients/Families Aided by UMD Per Year Based on National Unemployment Rate"),
#sidebar layout with input and output definitions
sidebarLayout(
#sidebar panel, input
sidebarPanel(
numericInput("Unemployment.Rate..Percent.", "Unemployment Rate (Percent)", value = 5, min = 0, max = NA, step = NA, width = NULL)
),
#main panel for displaying outputs
mainPanel(
#output: scatter plot
tabsetPanel(type = "tabs",
tabPanel("Model Prediction", textOutput("clients")), # dependent variable (clients aided/yr) output
tabPanel("Scatterplot", plotOutput("blscorr")), # Plot
tabPanel("Model Summary Stats", verbatimTextOutput("summary")) # Regression output
)
)
)
)
#define server logic for making figure
server <- function(input, output) {
# dependent variable (clients aided/yr) output
output$clients <- renderText({
paste('Predicted Number of Clients/Families Aided per Year =', employ(input$Unemployment.Rate..Percent.))
})
# Scatterplot output
output$blscorr <- renderPlot({
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "Clients/Families Aided per Year vs. National Unemployment")
}, height=400)
# Regression output
output$summary <- renderPrint({
fit <- lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(fit)
})
}
shinyApp(ui = ui, server = server)
#rsconnect::deployApp("D:/bios611-projects-fall-2019-JessLMurray/project_2")
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
counts = histo$counts
#app.R
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(shiny)
library(devtools)
source("helper_functions.R")
#rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#load in the data
#note - I cleaned up the dates and the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
#see helper functions script for description of functions
load_umd()
clean_umd()
umd20 <- clean_umd()
load_bls()
clean_umdyear()
load_bls()
clean_umdyear()
numclean_umdyear()
#app.R
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(shiny)
library(devtools)
source("helper_functions.R")
#rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#load in the data
#note - I cleaned up the dates and the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
#see helper functions script for description of functions
load_umd()
clean_umd()
umd20 <- clean_umd()
load_bls()
clean_umdyear()
numclean_umdyear()
histo <- hist(umdyear, main="Frequency of Clients/Families Aided by UMD
per Year", ylab="Year", col="light blue")
counts = histo$counts
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
#define UI
ui <- fluidPage(
#App title
titlePanel("Predicting the Number of Clients/Families Aided by UMD Per Year Based on National Unemployment Rate"),
#sidebar layout with input and output definitions
sidebarLayout(
#sidebar panel, input
sidebarPanel(
numericInput("Unemployment.Rate..Percent.", "Unemployment Rate (Percent)", value = 5, min = 0, max = NA, step = NA, width = NULL)
),
#main panel for displaying outputs
mainPanel(
#output: scatter plot
tabsetPanel(type = "tabs",
tabPanel("Model Prediction", textOutput("clients")), # dependent variable (clients aided/yr) output
tabPanel("Scatterplot", plotOutput("blscorr")), # Plot
tabPanel("Model Summary Stats", verbatimTextOutput("summary")) # Regression output
)
)
)
)
#define server logic for making figure
server <- function(input, output) {
# dependent variable (clients aided/yr) output
output$clients <- renderText({
paste('Predicted Number of Clients/Families Aided per Year =', employ(input$Unemployment.Rate..Percent.))
})
# Scatterplot output
output$blscorr <- renderPlot({
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "Clients/Families Aided per Year vs. National Unemployment")
}, height=400)
# Regression output
output$summary <- renderPrint({
fit <- lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(fit)
})
}
shinyApp(ui = ui, server = server)
#rsconnect::deployApp("D:/bios611-projects-fall-2019-JessLMurray/project_2")
#rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#load in the data
#note - I cleaned up the dates and the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
#see helper functions script for description of functions
load_umd()
clean_umd()
umd20 <- clean_umd()
load_bls()
clean_umdyear()
numclean_umdyear()
#app.R
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(shiny)
library(devtools)
source("helper_functions.R")
#rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#load in the data
#note - I cleaned up the dates and the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
#see helper functions script for description of functions
load_umd()
clean_umd()
umd20 <- clean_umd()
load_bls()
umdyear <- umdclean20$year
umdyear <- as.numeric(umdyear)
histo <- hist(umdyear, main="Frequency of Clients/Families Aided by UMD
per Year", ylab="Year", col="light blue")
counts <- histo$counts
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
#define UI
ui <- fluidPage(
#App title
titlePanel("Predicting the Number of Clients/Families Aided by UMD Per Year Based on National Unemployment Rate"),
#sidebar layout with input and output definitions
sidebarLayout(
#sidebar panel, input
sidebarPanel(
numericInput("Unemployment.Rate..Percent.", "Unemployment Rate (Percent)", value = 5, min = 0, max = NA, step = NA, width = NULL)
),
#main panel for displaying outputs
mainPanel(
#output: scatter plot
tabsetPanel(type = "tabs",
tabPanel("Model Prediction", textOutput("clients")), # dependent variable (clients aided/yr) output
tabPanel("Scatterplot", plotOutput("blscorr")), # Plot
tabPanel("Model Summary Stats", verbatimTextOutput("summary")) # Regression output
)
)
)
)
#define server logic for making figure
server <- function(input, output) {
# dependent variable (clients aided/yr) output
output$clients <- renderText({
paste('Predicted Number of Clients/Families Aided per Year =', employ(input$Unemployment.Rate..Percent.))
})
# Scatterplot output
output$blscorr <- renderPlot({
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "Clients/Families Aided per Year vs. National Unemployment")
}, height=400)
# Regression output
output$summary <- renderPrint({
fit <- lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(fit)
})
}
shinyApp(ui = ui, server = server)
#rsconnect::deployApp("D:/bios611-projects-fall-2019-JessLMurray/project_2")
load_bls()
umdyear <- umdclean20$year
load_bls()
umdyear <- umd20$year
umdyear <- as.numeric(umdyear)
histo <- hist(umdyear, main="Frequency of Clients/Families Aided by UMD
per Year", ylab="Year", col="light blue")
counts <- histo$counts
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
bls_avg<-load_bls()
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
#define UI
ui <- fluidPage(
#App title
titlePanel("Predicting the Number of Clients/Families Aided by UMD Per Year Based on National Unemployment Rate"),
#sidebar layout with input and output definitions
sidebarLayout(
#sidebar panel, input
sidebarPanel(
numericInput("Unemployment.Rate..Percent.", "Unemployment Rate (Percent)", value = 5, min = 0, max = NA, step = NA, width = NULL)
),
#main panel for displaying outputs
mainPanel(
#output: scatter plot
tabsetPanel(type = "tabs",
tabPanel("Model Prediction", textOutput("clients")), # dependent variable (clients aided/yr) output
tabPanel("Scatterplot", plotOutput("blscorr")), # Plot
tabPanel("Model Summary Stats", verbatimTextOutput("summary")) # Regression output
)
)
)
)
#define server logic for making figure
server <- function(input, output) {
# dependent variable (clients aided/yr) output
output$clients <- renderText({
paste('Predicted Number of Clients/Families Aided per Year =', employ(input$Unemployment.Rate..Percent.))
})
# Scatterplot output
output$blscorr <- renderPlot({
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "Clients/Families Aided per Year vs. National Unemployment")
}, height=400)
# Regression output
output$summary <- renderPrint({
fit <- lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(fit)
})
}
shinyApp(ui = ui, server = server)
traceback()
bls_avg
#app.R
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(shiny)
library(devtools)
source("helper_functions.R")
#rsconnect::setAccountInfo(name='jesslmurray', token='5CCB97C7AAF85C4C2932DB47530A2B8A', secret='rXMqDS/itm6+4GqDYROWYlwCEmBcVK6QIislFrOG')
#load in the data
#note - I cleaned up the dates and the column for "Type of bill paid" by renaming redundancies in excel with the filter tool
#see helper functions script for description of functions
load_umd()
clean_umd()
umd20 <- clean_umd()
bls_avg<-load_bls()
bls_avg
umdyear <- umd20$year
umdyear <- as.numeric(umdyear)
histo <- hist(umdyear, main="Frequency of Clients/Families Aided by UMD
per Year", ylab="Year", col="light blue")
counts <- histo$counts
blscorr <- data.frame("Clients/Families Aided Per Year" = counts,
"Unemployment Rate (Percent)" = bls_avg$`avg_unemployment`)
#define UI
ui <- fluidPage(
#App title
titlePanel("Predicting the Number of Clients/Families Aided by UMD Per Year Based on National Unemployment Rate"),
#sidebar layout with input and output definitions
sidebarLayout(
#sidebar panel, input
sidebarPanel(
numericInput("Unemployment.Rate..Percent.", "Unemployment Rate (Percent)", value = 5, min = 0, max = NA, step = NA, width = NULL)
),
#main panel for displaying outputs
mainPanel(
#output: scatter plot
tabsetPanel(type = "tabs",
tabPanel("Model Prediction", textOutput("clients")), # dependent variable (clients aided/yr) output
tabPanel("Scatterplot", plotOutput("blscorr")), # Plot
tabPanel("Model Summary Stats", verbatimTextOutput("summary")) # Regression output
)
)
)
)
#define server logic for making figure
server <- function(input, output) {
# dependent variable (clients aided/yr) output
output$clients <- renderText({
paste('Predicted Number of Clients/Families Aided per Year =', employ(input$Unemployment.Rate..Percent.))
})
# Scatterplot output
output$blscorr <- renderPlot({
ggplot(blscorr, aes(x=Unemployment.Rate..Percent., y=Clients.Families.Aided.Per.Year)) +
geom_point() +
geom_smooth(method = 'lm', se=TRUE, formula=y~x) +
labs(x="Average Unemployment Rate (Percent)", y="Clients/Families Aided Per Year",
title = "Clients/Families Aided per Year vs. National Unemployment")
}, height=400)
# Regression output
output$summary <- renderPrint({
fit <- lm(blscorr$Clients.Families.Aided.Per.Year ~ blscorr$Unemployment.Rate..Percent.)
summary(fit)
})
}
shinyApp(ui = ui, server = server)
getwo()
getwd()
setwd("D:/bios611-projects-fall-2019-JessLMurray/project_2/data")
get()
getwd()
client <- read.table(file = "CLIENT_191102.tsv")
client <- read.table(file = 'CLIENT_191102.tsv', sep = '\t', header = TRUE)
Read(client)
View(client)
client
client <- read.table(file = 'CLIENT_191102.tsv', sep = '\t', header = TRUE)
client <- read.table(file = 'CLIENT_191102', sep = '\t', header = TRUE)
setwd("D:/bios611-projects-fall-2019-JessLMurray/project_3/data")
get()
getwd()
client <- read.table(file = 'CLIENT_191102', sep = '\t', header = TRUE)
setwd("D:/bios611-projects-fall-2019-JessLMurray/project_3/data")
setwd("D:/bios611-projects-fall-2019-JessLMurray/project_3/data")
getwd()
client <- read.table(file = 'CLIENT_191102', sep = '\t', header = TRUE)
client <- read.table(file = 'CLIENT_191102.tsv', sep = '\t', header = TRUE)
View(client)
library(tidyverse)
client <- read_url("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/CLIENT_191102.tsv", sep = '\t', header = TRUE)
client <- read_tsv(url("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/CLIENT_191102.tsv"), na = "**")
View(client)
vprint(client)
setwd("D:/bios611-projects-fall-2019-JessLMurray/project_3/scripts")
getwd()
disable_entry <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_ENTRY_191102.tsv", na = "**")
View(disable_entry)
disable_ext <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_EXIT_191102.tsv", na = "**")
View(disable_exit)
disable_exit <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_EXIT_191102.tsv", na = "**")
View(disable_exit)
disable_reviews <- read_tsv("https://github.com/biodatascience/datasci611/blob/gh-pages/data/project2_2019/EE_REVIEWS_191102.tsv", na = "**")
View(disable_reviews)
disable_reviews <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/EE_REVIEWS_191102.tsv", na = "**")
View(disable_reviews)
ee_reviews <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/EE_REVIEWS_191102.tsv", na = "**")
View(disable_reviews)
ee_udes <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/EE_UDES_191102.tsv", na = "**")
View(ee_udes)
entry_exit <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/ENTRY_EXIT_191102.tsv", na = "**")
View(entry_exit)
healthins_entry <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/HEALTH_INS_ENTRY_191102.tsv", na = "**")
View(healthins_entry)
View(disable_reviews)
healthins_exit <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/HEALTH_INS_EXIT_191102.tsv", na = "**")
View(healthins_exit)
income_entry <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/INCOME_ENTRY_191102.tsv", na = "**")
View(income_entry)
income_exit <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/INCOME_EXIT_191102.tsv", na = "**")
View(income_exit)
View(income_exit)
noncash_entry <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/NONCASH_ENTRY_191102.tsv", na = "**")
View(noncash_entry)
noncash_exit <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/NONCASH_EXIT_191102.tsv", na = "**")
View(noncash_exit)
View(provider)
provider <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/PROVIDER_191102.tsv", na = "**")
View(provider)
spdat_fam <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/VI_SPDAT_FAM_V2_191102.tsv", na = "**")
View(spdat_fam)
spdat_ind <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/VI_SPDAT_IND_V2_191102.tsv", na = "**")
View(spdat_ind)
spdat_v1 <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/VI_SPDAT_V1_191102.tsv", na = "**")
View(spdat_v1)
View(client)
disable_entry <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/DISABILITY_ENTRY_191102.tsv", na = "**")
View(disable_entry)
View(disable_reviews)
ee_udes <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/EE_UDES_191102.tsv", na = "**")
View(ee_udes)
View(disable_reviews)
ee_udes <- read_tsv("https://raw.githubusercontent.com/biodatascience/datasci611/gh-pages/data/project2_2019/EE_UDES_191102.tsv", na = "**")
View(ee_udes)
View(ee_udes)
View(disable_reviews)
View(ee_reviews)
View(entry_exit)
View(healthins_entry)
View(healthins_exit)
View(income_entry)
View(income_exit)
View(noncash_entry)
View(provider)
